---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
editor: visual
---

## 1.1 Overview

In this hands-on excercise, I learn how to import and wrangling geospatial data using appropriate R packages.

## 1.2 Getting Started

The code chunk below install and load sf and tidyverse packages in R environment.

```{r}
pacman::p_load(sf, tidyverse)
```

## 1.3 Import Geospatial Data:

We have learnt how to import data using st_read. the following data are getting imported:

1.  **MP14_SUBZONE_WEB_PL**, a polygon feature layer in ESRI shapefile format

```{r}
mpsz = st_read(dsn = "Hands-on_Ex1/data/geospatial", 
                  layer = "MP14_SUBZONE_WEB_PL")
```

2.  **CyclingPath**, a line feature layer in ESRI shapefile format

```{r}
cyclingpath = st_read(dsn = "Hands-on_Ex1/data/geospatial", 
                         layer = "CyclingPathGazette")
```

2.  **PreSchool**, a point feature layer in kml file format

```{r}
preschool = st_read("Hands-on_Ex1/data/geospatial/pre-schools-location-kml.kml")
```

here we got to know about the data, coordinate reference system each data set is about.

## 1.4 Checking the Content of A Simple Feature Data Frame

```{r}
st_geometry(mpsz)
```

```{r}
glimpse(mpsz)
```

```{r}
tail(mpsz, n =5)
```

```{r}
head(mpsz, n=5)  
```

| st_geometry()                             | Glimpse()                                                                             | head() and tail()                                                       |
|---------------------|-----------------------------|----------------------|
| It prints the basic geometry informations | Lets you have a look at the data frame and fields are all in double-precision values. | Returns the first or last parts of a vector, matrix, table, data frame. |

## 1.5 Plotting the Geospatial Data

```{r}
plot(mpsz)
```

As we got a worning, lets try using max.plot() to see how it works.

```{r}
plot(mpsz,max.plot=15)
```

```{r}
plot(st_geometry(mpsz))
```

```{r}
plot(mpsz["PLN_AREA_N"])
```

```{r}
plot(mpsz["SUBZONE_NO"])
```

We have used plot() and we have tried various ways in which it can be used. We can use it with different columns (specifying column name) or if we simply plot() it will plot give you a warning like this (Warning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot all). We also learnt about using st_geometry() for plotting.

## 1.6 Working with Projection

```{r}
st_crs(mpsz)
```

Although mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 shouldbe [3414](https://epsg.io/3414).

EPSG Geodetic Parameter Dataset (also EPSG registry) is a public registry of geodetic datums, spatial reference systems, Earth ellipsoids, coordinate transformations and related units of measurement. Originally created by European Petroleum Survey Group (EPSG). Each entity is assigned an EPSG code between 1024-32767, along with a standard machine-readable well-known text (WKT) representation. The dataset is actively maintained by the IOGP Geomatics Committee.

In order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

```{r}
st_crs(mpsz3414)
```

it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

Let us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.

```{r}
preschool3414 <- st_transform(preschool, crs = 3414)
```

## 1.7 Importing and Converting An Aspatial Data

We learnt in this section how to import an aspatial data into R environment and save it as a tibble data frame. Next, you will convert it into a simple feature data frame.

```{r}
listings <- read_csv("Hands-on_Ex1/data/aspatial/listings.csv")
```

```{r}
list(listings) 
```

tibble data frame consists of 4252 rows and 16 columns. Two useful fields we are going to use in the next phase are latitude and longitude.

```{r}
listings_sf <- st_as_sf(listings, coords = c("longitude", "latitude"), crs=4326) %>% st_transform(crs = 3414)
```

-   coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates. crs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic

-   %\>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.

```{r}
glimpse(listings_sf)
```

Notice that a new column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been dropped from the data frame.

## 1.8 Geoprocessing with sf package

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs = 30)
```

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

```{r}
sum(buffer_cycling$AREA)
```

**We have found the results!!**

The scenario 2:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

```{r}
summary(mpsz3414$`PreSch Count`)
```

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

The solution:

Firstly, the code chunk below uses st_area() of sf package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Next, mutate() of dplyr package is used to compute the density by using the code chunk below.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## 1.9 Explorotary Data Analysis (EDA)

Basic EDA using scatter plots, histogram using ggplot2.

```{r}
hist(mpsz3414$`PreSch Density`)
```

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`), y = as.numeric(`PreSch Count`) ))+
  geom_point() +
  labs(x = "Pre-school density (per km sq)", y = "Pre school Count")
```

we have learnt EDA in this section.
