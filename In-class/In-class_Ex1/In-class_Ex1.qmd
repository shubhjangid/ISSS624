---
title: "In Class Ex-1: Spatial Weights and Applications"
editor: visual
---

## Overview

"Spatial weights" are one way to represent graphs in geographic data science and spatial statistics. They are widely used constructs that represent geographic relationships between the observational units in a spatially referenced dataset. Implicitly, spatial weights connect objects in a geographic table to one another using the spatial relationships between them

-   A way to define spatial neighbourhood

-   To check whether they are neighbours or not?

**Defining Spatial Weights**

## Getting Started

The code chunk below will below install and load tidyverse, sf, spdep, tmap package

```{r}
pacman::p_load(sf, tidyverse, spdep, tmap)
```

## Importing the data into R environment

This code will import ESRI shapefile into R.

```{r}
hunan_sf <- st_read(dsn = "data1/geospatial", layer = "hunan")
```

This code will import CSV into R.

```{r}
hunan12 <- read_csv("data1/aspatial/Hunan_2012.csv")
```

The code chunk below will be used to update the attribute table of hunan's SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.

```{r}
hunan_sf <- left_join(hunan_sf, hunan12)
```

## Visualising Regional Development Indicator

we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.

```{r}
basemap <- tm_shape(hunan_sf) + tm_polygons() + tm_text("NAME_3", size = 0.5)

gdppc <- qtm(hunan_sf, "GDPPC")
tmap_arrange(basemap, gdppc, asp = 1, ncol = 2)
```

## Computing Contiguity Spatial Weights

In this section, you will learn how to use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a "queen" argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don't specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

### COmputing (Queen) contiguity based neighbours

```{r}
wm_q <- poly2nb(hunan_sf, queen=TRUE)
summary(wm_q)
```

summary tells us that 88 units, most connected has 11 neighbours and least 2 have only 1.

```{r}
wm_q[[1]]
```

This tells us that polygon 1 has 5 neighbors and they are 2, 3, 4, 57, 85. to retrieve the country name we use the below chunk of code:

```{r}
hunan_sf$County[1]
```

To see the names of the county surrounding Anxiang:

```{r}
hunan_sf$NAME_3[c(2,3,4,57,85)]
```

We can retrieve the GDPPC of these five countries by using the code chunk below.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan_sf$GDPPC[nb1]
nb1
```

The printed output above shows that the GDPPC of the five nearest neighbours based on Queen's method are 20981, 34592, 24473, 21311 and 22879 respectively.

You can display the complete weight matrix by using str().

```{r}
str(wm_q)
```

### Creating (ROOK) contiguity based neighbours

```{r}
wm_r <- poly2nb(hunan_sf, queen=FALSE)
summary(wm_r)
```

### Visualising contiguity weights

A connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids

We will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation

To get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan_sf$geometry, ~st_centroid(.x)[[1]])
```

```{r}
latitude <- map_dbl(hunan_sf$geometry, ~st_centroid(.x)[[2]])
coords <- cbind(longitude, latitude)
head(coords)
```

#### Plotting Queen contiguity based neighbours map

```{r}
plot(hunan_sf$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

#### Plotting Rook contiguity based neighbours map

```{r}
plot(hunan_sf$geometry, border="lightgreen")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### Plotting both Queen and Rook contiguity based neighbours maps

```{r}
par(mfrow=c(1,2))
plot(hunan_sf$geometry, border="blue")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan_sf$geometry, border="pink")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

## Computing distance based neighbours

In this section, you will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package.

The function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.

### Determine the cut-off distance

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.

-   Convert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().

-   Return the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using unlist().

```{r}
#coords <- coordinates(hunan_sf)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

### Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

**Quiz:** What is the meaning of "Average number of links: 3.681818" shown above?

It is the average of every county's neighbours.

```{r}
str(wm_d62)
```

Another way:

```{r}
table(hunan_sf$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

#### Plotting fixed distance weight matrix

```{r}
plot(hunan_sf$geometry, border="pink")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="green", length=0.08)
```

The Green lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

Alternatively, we can plot both of them next to each other by using the code chunk below

```{r}
par(mfrow=c(1,2))
plot(hunan_sf$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan_sf$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

### Computing adaptive distance weight matrix

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

```{r}
str(knn6)
```

#### Plotting distance based neighbours

```{r}
plot(hunan_sf$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Weights based on IDW

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

### Row-standardised weights matrix

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

The zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.

To see the weight of the first polygon's four neighbors type:

```{r}
rswm_q$weights[10]
```

Each neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor's income will be multiplied by 0.2 before being tallied.

Using the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## Application of Spatial Weight Matrix

In this section, you will learn how to create four different spatial lagged variables, they are:

-   spatial lag with row-standardized weights,

-   spatial lag as a sum of neighbouring values,

-   spatial window average, and spatial window sum.

### Spatial lag with row-standardized weights

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan_sf$GDPPC)
GDPPC.lag
```

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan_sf$GDPPC[nb1]
nb1
```

```{r}
lag.list <- list(hunan_sf$NAME_3, lag.listw(rswm_q, hunan_sf$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan_sf <- left_join(hunan_sf,lag.res)
```

```{r}
head(hunan_sf)
```

```{r}
gdppc <- qtm(hunan_sf, "GDPPC")
lag_gdppc <- qtm(hunan_sf, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### patial lag as a sum of neighboring values

We can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.

We start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

```{r}
lag_sum <- list(hunan_sf$NAME_3, lag.listw(b_weights2, hunan_sf$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

```{r}
lag_sum
```

```{r}
hunan_sf <- left_join(hunan_sf, lag.res)
```

```{r}
gdppc <- qtm(hunan_sf, "GDPPC")
lag_sum_gdppc <- qtm(hunan_sf, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### Spatial window average

```{r}
wm_q1 <- wm_q
```

```{r}
include.self(wm_q1)
```

```{r}
wm_q1 <- nb2listw(wm_q1)
wm_q1
```

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_q1, 
                             hunan_sf$GDPPC)
lag_w_avg_gpdpc
```

```{r}
lag.list.wm_q1 <- list(hunan_sf$NAME_3, lag.listw(wm_q1, hunan_sf$GDPPC))
lag_wm_q1.res <- as.data.frame(lag.list.wm_q1)
colnames(lag_wm_q1.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

```{r}
hunan_sf <- left_join(hunan_sf, lag_wm_q1.res)
```

```{r}
gdppc <- qtm(hunan_sf, "GDPPC")
w_avg_gdppc <- qtm(hunan_sf, "lag_window_avg GDPPC")
tmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### Spatial window sum

The spatial window sum is the counter part of the window average, but without using row-standardized weights. To do this we assign binary weights to the neighbor structure that includes the diagonal element.

```{r}
wm_q1 <- wm_q
```

```{r}
include.self(wm_q1)
```

```{r}
wm_q1
```

```{r}
b_weights <- lapply(wm_q1, function(x) 0*x + 1)
b_weights[1]
```

```{r}
b_weights2 <- nb2listw(wm_q1, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

```{r}
w_sum_gdppc <- list(hunan_sf$NAME_3, lag.listw(b_weights2, hunan_sf$GDPPC))
w_sum_gdppc
```

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

```{r}
hunan_sf <- left_join(hunan_sf, w_sum_gdppc.res)
```

```{r}
gdppc <- qtm(hunan_sf, "GDPPC")
w_sum_gdppc <- qtm(hunan_sf, "w_sum GDPPC")
tmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)
```

Note: For more effective comparison, it is advicible to use the core tmap mapping functions.
